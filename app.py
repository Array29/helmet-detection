import streamlit as st
from PIL import Image
from ultralytics import YOLO
import os
import time
import cv2


st.set_page_config(page_title="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∫–∏", page_icon="ü¶∫")


st.title("üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫")


#@st.cache_resource
def load_model():
    return YOLO("best.pt")  

model = load_model()

st.sidebar.markdown("## üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
source = st.sidebar.radio("–ò—Å—Ç–æ—á–Ω–∏–∫:", ["üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã"])

img_path = None
img = None


if source == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
    st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        img = Image.open(uploaded_file)
        st.image(img, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
        img_path = "temp.jpg"
        img.save(img_path)

elif source == "üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–∞–º–µ—Ä—ã":
    st.markdown("### üì∏ –§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º")
    photo = st.camera_input("–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ")
    if photo:
        img = Image.open(photo)
        st.image(img, caption="–°–¥–µ–ª–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ", use_container_width=True)
        img_path = "temp.jpg"
        img.save(img_path)

if img_path and os.path.exists(img_path):
    if st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–∞—Å–∫–∏"):
        progress = st.progress(0, text="–ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...")
        for i in range(0, 100, 20):
            time.sleep(0.1)
            progress.progress(i + 20, text="–†–∞—Å–ø–æ–∑–Ω–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        with st.spinner("–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∞–ª–∏–∑..."):
            results = model(img_path)
            res_plotted = results[0].plot()
            res_plotted_rgb = cv2.cvtColor(res_plotted, cv2.COLOR_BGR2RGB)

            labels = results[0].names
            classes_detected = [results[0].names[int(cls)] for cls in results[0].boxes.cls]

            has_helmet = any("helmet" in c.lower() for c in classes_detected)

            st.markdown("### üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
            col1, col2 = st.columns(2)
            with col1:
                st.image(img, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)
            with col2:
                st.image(res_plotted_rgb, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_container_width=True)

            st.markdown("---")
            if has_helmet:
                st.success("‚úÖ –î–û–ü–£–°–ö –†–ê–ó–†–ï–®–Å–ù: –ö–∞—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ –∑–æ–Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç.")
            else:
                st.error("‚õî –î–û–ü–£–°–ö –ó–ê–ü–†–ï–©–Å–ù: –ö–∞—Å–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ù–∞–¥–µ–Ω—å—Ç–µ –∫–∞—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

st.markdown("""
<hr style="margin-top: 50px; border-top: 1px solid #444;" />
<div style='text-align: center; color: gray; font-size: small;'>
    ü¶∫ DS Capstone Project 2025| –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã | by –ê—Ä–∞–π –ñ–∞–π—Å–∞–Ω–±–µ–∫
</div>
""", unsafe_allow_html=True)
